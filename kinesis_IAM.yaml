Parameters: 
  UserStreamShards: 
    Type: Number
    Default: 1
    Description: Number of shards for user stream

  UtmStreamShards: 
    Type: Number
    Default: 1
    Description: Number of shards for utm stream

  RedshiftClusterEndpoint:
    Type: String
    Description: The connection string to connect to the redshift cluster 

  S3BucketName:
    Type: String
    Default: mahesh-events
    Description: Bucket to be used as an intermediatory

  RedshiftUsername: 
    Type: String
    Description: username for redshift

  RedshiftPassword: 
    Type: String
    Description: Password for redshift    

  RedshiftDatabase: 
    Type: String
    Description: database for redshift

  RedshiftAccountIDandRole:
    Type: String
    Default: arn:aws:iam::012345678901:role/some_role
    Description: Account id and role of redshift account. 

Resources:
    IAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/service-role/"
            RoleName: !Sub "KinesisFirehoseServiceRole-event-deliver-${AWS::Region}-1595873195176"
            AssumeRolePolicyDocument: !Sub "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"firehose.amazonaws.com\"},\"Action\":\"sts:AssumeRole\",\"Condition\":{\"StringEquals\":{\"sts:ExternalId\":\"${AWS::AccountId}\"}}}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - !Ref IAMManagedPolicy
              - !Ref IAMManagedPolicy2
              - "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"

    IAMManagedPolicy:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "KinesisFirehoseServicePolicy-event-delivery-stream-utm-${AWS::Region}-alt"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "glue:GetTable",
                                "glue:GetTableVersion",
                                "glue:GetTableVersions"
                            ],
                            "Resource": [
                                "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                                "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%",
                                "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                            ]
                        },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "s3:AbortMultipartUpload",
                                "s3:GetBucketLocation",
                                "s3:GetObject",
                                "s3:ListBucket",
                                "s3:ListBucketMultipartUploads",
                                "s3:PutObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::${S3BucketName}",
                                "arn:aws:s3:::${S3BucketName}/*"
                            ]
                        },
                        {
                              "Effect": "Allow",
                              "Action": "sts:AssumeRole",
                              "Resource": "${RedshiftAccountIDandRole}"
                          },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:GetFunctionConfiguration"
                            ],
                            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:GenerateDataKey",
                                "kms:Decrypt"
                            ],
                            "Resource": [
                                "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "kms:ViaService": "s3.${AWS::Region}.amazonaws.com"
                                },
                                "StringLike": {
                                    "kms:EncryptionContext:aws:s3:arn": [
                                        "arn:aws:s3:::%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/*"
                                    ]
                                }
                            }
                        },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/event-delivery-stream-utm:log-stream:*"
                            ]
                        },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "kinesis:DescribeStream",
                                "kinesis:GetShardIterator",
                                "kinesis:GetRecords",
                                "kinesis:ListShards"
                            ],
                            "Resource": "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/event-stream-utm"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:Decrypt"
                            ],
                            "Resource": [
                                "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "kms:ViaService": "kinesis.${AWS::Region}.amazonaws.com"
                                },
                                "StringLike": {
                                    "kms:EncryptionContext:aws:kinesis:arn": "arn:aws:kinesis:us-east-1:${AWS::AccountId}:stream/event-stream-utm"
                                }
                            }
                        }
                    ]
                }

    IAMManagedPolicy2:
        Type: "AWS::IAM::ManagedPolicy"
        Properties:
            ManagedPolicyName: !Sub "KinesisFirehoseServicePolicy-event-delivery-stream-${AWS::Region}-alt-alt"
            Path: "/service-role/"
            PolicyDocument: !Sub |
                {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "glue:GetTable",
                                "glue:GetTableVersion",
                                "glue:GetTableVersions"
                            ],
                            "Resource": [
                                "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:catalog",
                                "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:database/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%",
                                "arn:aws:glue:${AWS::Region}:${AWS::AccountId}:table/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                            ]
                        },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "s3:AbortMultipartUpload",
                                "s3:GetBucketLocation",
                                "s3:GetObject",
                                "s3:ListBucket",
                                "s3:ListBucketMultipartUploads",
                                "s3:PutObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::${S3BucketName}",
                                "arn:aws:s3:::${S3BucketName}/*"
                            ]
                        },
                         {
                              "Effect": "Allow",
                              "Action": "sts:AssumeRole",
                              "Resource": "${RedshiftAccountIDandRole}"
                          },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "lambda:InvokeFunction",
                                "lambda:GetFunctionConfiguration"
                            ],
                            "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:GenerateDataKey",
                                "kms:Decrypt"
                            ],
                            "Resource": [
                                "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "kms:ViaService": "s3.${AWS::Region}.amazonaws.com"
                                },
                                "StringLike": {
                                    "kms:EncryptionContext:aws:s3:arn": [
                                        "arn:aws:s3:::%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%/*"
                                    ]
                                }
                            }
                        },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "logs:PutLogEvents"
                            ],
                            "Resource": [
                                "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/kinesisfirehose/event-delivery-stream:log-stream:*"
                            ]
                        },
                        {
                            "Sid": "",
                            "Effect": "Allow",
                            "Action": [
                                "kinesis:DescribeStream",
                                "kinesis:GetShardIterator",
                                "kinesis:GetRecords",
                                "kinesis:ListShards"
                            ],
                            "Resource": "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/event-stream-user"
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "kms:Decrypt"
                            ],
                            "Resource": [
                                "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/%FIREHOSE_POLICY_TEMPLATE_PLACEHOLDER%"
                            ],
                            "Condition": {
                                "StringEquals": {
                                    "kms:ViaService": "kinesis.${AWS::Region}.amazonaws.com"
                                },
                                "StringLike": {
                                    "kms:EncryptionContext:aws:kinesis:arn": "arn:aws:kinesis:us-east-1:${AWS::AccountId}:stream/event-stream-user"
                                }
                            }
                        }
                    ]
                }
    KinesisStream:
        Type: "AWS::Kinesis::Stream"
        Properties:
            Name: "event-stream-user"
            RetentionPeriodHours: 24
            ShardCount: 
              Ref: UserStreamShards

    KinesisStream2:
        Type: "AWS::Kinesis::Stream"
        Properties:
            Name: "event-stream-utm"
            RetentionPeriodHours: 24            
            ShardCount: 
              Ref: UtmStreamShards

    KinesisFirehoseDeliveryStream:
        Type: "AWS::KinesisFirehose::DeliveryStream"
        Properties:
            DeliveryStreamName: "event-delivery-stream"
            DeliveryStreamType: "KinesisStreamAsSource"
            KinesisStreamSourceConfiguration: 
                KinesisStreamARN: !GetAtt KinesisStream.Arn
                RoleARN: !Ref IAMRole
            RedshiftDestinationConfiguration: 
                CloudWatchLoggingOptions: 
                    Enabled: true
                    LogGroupName: "/aws/kinesisfirehose/event-delivery-stream-28"
                    LogStreamName: "RedshiftDelivery"
                ClusterJDBCURL: !Sub "jdbc:redshift://${RedshiftClusterEndpoint}/${RedshiftDatabase}"
                CopyCommand: 
                    DataTableName: "events"
                    DataTableColumns: "environment,user_account_id,request_timestamp,referrer,website_id,topic,location,request_id,message,cookie_id,user_agent"
                    CopyOptions: "json 'auto' TRUNCATECOLUMNS blanksasnull emptyasnull"
                ProcessingConfiguration: 
                    Enabled: false
                RoleARN: !Ref IAMRole
                S3Configuration: 
                    BucketARN: !Sub "arn:aws:s3:::${S3BucketName}"
                    BufferingHints: 
                        SizeInMBs: 5
                        IntervalInSeconds: 300
                    CloudWatchLoggingOptions: 
                        Enabled: true
                        LogGroupName: "/aws/kinesisfirehose/event-delivery-stream-28"
                        LogStreamName: "S3Delivery"
                    CompressionFormat: "UNCOMPRESSED"
                    EncryptionConfiguration: 
                        NoEncryptionConfig: "NoEncryption"
                    Prefix: "events"
                    RoleARN: !Ref IAMRole
                Username: !Ref RedshiftUsername
                Password: !Ref RedshiftPassword


    KinesisFirehoseDeliveryStream2:
        Type: "AWS::KinesisFirehose::DeliveryStream"
        Properties:
            DeliveryStreamName: "event-delivery-stream-utm"
            DeliveryStreamType: "KinesisStreamAsSource"
            KinesisStreamSourceConfiguration: 
                KinesisStreamARN: !GetAtt KinesisStream2.Arn
                RoleARN: !Ref IAMRole
            RedshiftDestinationConfiguration: 
                CloudWatchLoggingOptions: 
                    Enabled: true
                    LogGroupName: "/aws/kinesisfirehose/event-delivery-stream-utm"
                    LogStreamName: "RedshiftDelivery"
                ClusterJDBCURL: !Sub "jdbc:redshift://${RedshiftClusterEndpoint}/${RedshiftDatabase}"
                CopyCommand: 
                    DataTableName: "utm"
                    DataTableColumns: "request_id, source, medium, campaign, content, term, matchtype, network,ad_id, ad_pos,placement, placement_category, testgroup, device"
                    CopyOptions: "json 'auto' TRUNCATECOLUMNS blanksasnull emptyasnull"
                ProcessingConfiguration: 
                    Enabled: false
                RoleARN: !Ref IAMRole
                S3Configuration: 
                    BucketARN: !Sub "arn:aws:s3:::${S3BucketName}"
                    BufferingHints:
                        SizeInMBs: 5
                        IntervalInSeconds: 300
                    CloudWatchLoggingOptions: 
                        Enabled: true
                        LogGroupName: "/aws/kinesisfirehose/event-delivery-stream-utm"
                        LogStreamName: "S3Delivery"
                    CompressionFormat: "UNCOMPRESSED"
                    EncryptionConfiguration: 
                        NoEncryptionConfig: "NoEncryption"
                    Prefix: "utm"
                    RoleARN: !Ref IAMRole
                Username: !Ref RedshiftUsername
                Password: !Ref RedshiftPassword
